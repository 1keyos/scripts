#!/bin/bash

# Copyright (c) 2010 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Wrapper scripts around cros_mark_as_stable that marks all packages as stable
# that have CROS_WORKON_COMMIT that is different than the current HEAD commit
# of the corresponding git repository.

# Load common constants.  This should be the first executable line.
# The path to common.sh should be relative to your script's location.
. "$(dirname "$0")/common.sh"

# Load common functions for workon scripts.
. "$(dirname "$0")/lib/cros_workon_common.sh"

get_default_board

DEFINE_string board "${DEFAULT_BOARD}" \
  "The board to set package keywords for."
DEFINE_string tracking_branch "origin" \
  "Used with commit to specify branch to track against."

FLAGS "$@" || exit 1
eval set -- "${FLAGS_ARGV}"

set -e

BOARD_DIR=/build/"${FLAGS_board}"
EQUERYCMD=equery-"${FLAGS_board}"
EBUILDCMD=ebuild-"${FLAGS_board}"

PACKAGES=$( show_workon_ebuilds )

GRAB_HEAD_COMMIT_CMD="git show HEAD | head -1 | cut -f 2 -d ' '"

# Packages to mark as stable.
PACKAGE_LIST=""
# List of commit ids corresponding to package list.
COMMIT_ID_LIST=""
# List of IFS-delimited ebuilds to ignore.
PACKAGE_BLACKLIST=""
# File containing the names of blacklisted packages.
BLACKLIST_FILE=$(dirname "${0}")/cros_mark_as_stable_blacklist

[ -f "${BLACKLIST_FILE}" ] && \
  PACKAGE_BLACKLIST=$(cat "${BLACKLIST_FILE}")

function package_is_blacklisted() {
  # Makes a list that looks like "\|package1\|package2\|...packagen".
  local blist_regex=$(for i in ${PACKAGE_BLACKLIST}; do echo -n "\\|${i}"; done)
  expr "${1}" : "^\(${blist_regex/\\|/}\)$" &> /dev/null && return 0 || return 1
}

function ifs_normalize() {
  for i in $*; do echo "${i}"; done | sort -u |tr '\n' ' '
}

function eclass_affected_ebuilds() {
  CHROMIUMOS_OVERLAY="${HOME}/trunk/src/third_party/chromiumos-overlay/"

  info "Tracking eclass changes"
  pushd "${CHROMIUMOS_OVERLAY}" 1> /dev/null

  # Look at the last time chrome-bot commited anything.
  last_bot_commit=$(
    git log --author=chrome-bot -1|head -n 1|cut -f2 -d' '
  )
  info "Last bot commit is: ${last_bot_commit}"

  # List of eclasses touched in all commits since that commit.
  eclass_touched=$(ifs_normalize $(
      git diff --name-only ${last_bot_commit}|grep "^eclass\/.*\.eclass" | \
        sed -e 's,eclass/\(.*\)\.eclass,\1,' | \
        sort -u
    )
  )
  eclass_touched_prev=""

  if [ -z "${eclass_touched}" ]; then
    info "No eclasses changed"
    return 0
  fi

  # Iteratively add all eclasses that inherit the current list, until
  # the first iteration that will not add anything.
  while [ "${eclass_touched}" != "${eclass_touched_prev}" ]; do
    eclass_touched_prev=${eclass_touched}

    # regexp to search for eclass inheritance
    searchregexp="$(for i in ${eclass_touched}; do echo -n "\|${i}"; done)"
    searchregexp="inherit.*\(${searchregexp/|/}\).*"

    # Iterate the current list of eclasses and add immediate dependencies.
    eclass_touched=$(ifs_normalize $(
        find "eclass/" -name '*.eclass' | \
          xargs grep -l "${searchregexp}" | \
          sed -e "s,eclass/\(.*\)\.eclass,\1,"
      ) ${eclass_touched}
    )
  done

  info "Eclasses changed: ${eclass_touched}"

  # Look which ebuilds are affected.
  # NOTE: searchregexp is usable because last two lists of eclasses were the same
  ebuilds_affected=$(
      find . -name '*9999.ebuild' | \
        xargs grep -l "cros-workon" | \
        xargs grep -l "${searchregexp}" | \
        sed -e "s,.\/\(.*\)/.*-9999.ebuild,\1,"
  )

  echo "${ebuilds_affected}"

  popd 1> /dev/null
}

# For each package, compares the head commit id to the commit id in the ebuild.
# If they do not match, add the package and its commit id into ${PACKAGE_LIST}
# and ${COMMIT_ID_LIST}
for package in ${PACKAGES}; do
  if package_is_blacklisted ${package}; then
    info "${package} blacklisted, skipping"
    continue
  fi
  # We need to pick up any stable ebuilds for any platform.
  ebuild_path=$(ACCEPT_KEYWORDS="arm x86 amd64" ${EQUERYCMD} which ${package})\
      || continue
  # Get 9999 ebuild path to see if it got changed.
  ebuild_9999_path=$(ACCEPT_KEYWORDS="~*" ${EQUERYCMD} which ${package}) \
      || continue
  # Sets ${CROS_WORKON_SRCDIR} from the ebuild.
  eval $(${EBUILDCMD} ${ebuild_path} info) &> /dev/null || continue
  head_commit=$( cd "${CROS_WORKON_SRCDIR}" &&\
    bash -c "${GRAB_HEAD_COMMIT_CMD}" ) || continue
  egit_commit=$(\
    eval echo $(grep CROS_WORKON_COMMIT ${ebuild_path} | cut -f 2 -d '=')) ||\
      echo "No CROS_WORKON_COMMIT found in ${ebuild_path}"
  if [[ ${head_commit} != ${egit_commit} ]] && \
      [ -n "${head_commit}" ]; then
    info\
      "HEAD ${head_commit} != CROS_WORKON_COMMIT ${egit_commit} for ${package}"
    PACKAGE_LIST="${PACKAGE_LIST} ${package}"
    COMMIT_ID_LIST="${COMMIT_ID_LIST} ${head_commit}"
  elif [[ ${head_commit}  = ${egit_commit} ]]; then
    info "Commit id's match for ${package}, checking for 9999 ebuild change."
    # egrep succeeds if there are important differences between the ebuilds.
    if diff "${ebuild_path}" "${ebuild_9999_path}" | \
        egrep -v "KEYWORDS|CROS_WORKON_COMMIT|^---|^[<>]\ *$|^[0-9]"; then
      info "Detected 9999 ebuild change for ${package}."
      PACKAGE_LIST="${PACKAGE_LIST} ${package}"
      COMMIT_ID_LIST="${COMMIT_ID_LIST} ${egit_commit}"
    fi
  fi
done

PACKAGE_LIST=$(
  ifs_normalize ${PACKAGE_LIST} $(eclass_affected_ebuilds)
)

if [ -n "${PACKAGE_LIST}" ] ; then
  info "Candidate package list ${PACKAGE_LIST}"
  info "With commit id list ${COMMIT_ID_LIST}"

  ./cros_mark_as_stable --board ${FLAGS_board} -p "${PACKAGE_LIST}" \
    -i "${COMMIT_ID_LIST}" -t ${FLAGS_tracking_branch} commit  || \
    die "Could not mark all packages as stable"
else
  info "No candidate packages to be marked"
fi
